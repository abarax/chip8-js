import CPU from 'chip-8/cpu';
import Memory from 'chip-8/memory';
import Display from 'chip-8/display';
import Input from 'chip-8/input';

export default class Chip8 {

  constructor(canvas) {
    this.isRunning = false;
    this.memory = new Memory();
    this.display = new Display(canvas);
    this.input = new Input();
    this.cpu = new CPU(this.memory, this.input, this.display);

    this.fontset = [
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    ];

    this.memory.write(0, this.fontset);
  }

  loadProgram(rom) {
      this.memory.write(0x200, rom);
  }

  start() {
      var self = this;
      this.isRunning = true;
      requestAnimationFrame(function execute () {
          if(self.isRunning) {
              self.cpu.step();
              self.display.update();
              self.input.update();

              requestAnimationFrame(execute);
          }

      });
  }

  stop() {
      this.isRunning = false;
  }

}
